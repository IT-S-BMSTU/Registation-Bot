// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: proto/bot.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BotGetterClient is the client API for BotGetter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotGetterClient interface {
	GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*BotResponse, error)
	GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*Module, error)
	GetAllBots(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BotsResponse, error)
}

type botGetterClient struct {
	cc grpc.ClientConnInterface
}

func NewBotGetterClient(cc grpc.ClientConnInterface) BotGetterClient {
	return &botGetterClient{cc}
}

func (c *botGetterClient) GetBot(ctx context.Context, in *GetBotRequest, opts ...grpc.CallOption) (*BotResponse, error) {
	out := new(BotResponse)
	err := c.cc.Invoke(ctx, "/BotGetter/GetBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botGetterClient) GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/BotGetter/GetQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botGetterClient) GetAllBots(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BotsResponse, error) {
	out := new(BotsResponse)
	err := c.cc.Invoke(ctx, "/BotGetter/GetAllBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotGetterServer is the server API for BotGetter service.
// All implementations should embed UnimplementedBotGetterServer
// for forward compatibility
type BotGetterServer interface {
	GetBot(context.Context, *GetBotRequest) (*BotResponse, error)
	GetQuestion(context.Context, *GetQuestionRequest) (*Module, error)
	GetAllBots(context.Context, *EmptyRequest) (*BotsResponse, error)
}

// UnimplementedBotGetterServer should be embedded to have forward compatible implementations.
type UnimplementedBotGetterServer struct {
}

func (UnimplementedBotGetterServer) GetBot(context.Context, *GetBotRequest) (*BotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (UnimplementedBotGetterServer) GetQuestion(context.Context, *GetQuestionRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedBotGetterServer) GetAllBots(context.Context, *EmptyRequest) (*BotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBots not implemented")
}

// UnsafeBotGetterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotGetterServer will
// result in compilation errors.
type UnsafeBotGetterServer interface {
	mustEmbedUnimplementedBotGetterServer()
}

func RegisterBotGetterServer(s grpc.ServiceRegistrar, srv BotGetterServer) {
	s.RegisterService(&BotGetter_ServiceDesc, srv)
}

func _BotGetter_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotGetterServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotGetter/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotGetterServer).GetBot(ctx, req.(*GetBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotGetter_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotGetterServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotGetter/GetQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotGetterServer).GetQuestion(ctx, req.(*GetQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotGetter_GetAllBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotGetterServer).GetAllBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotGetter/GetAllBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotGetterServer).GetAllBots(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotGetter_ServiceDesc is the grpc.ServiceDesc for BotGetter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotGetter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BotGetter",
	HandlerType: (*BotGetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBot",
			Handler:    _BotGetter_GetBot_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _BotGetter_GetQuestion_Handler,
		},
		{
			MethodName: "GetAllBots",
			Handler:    _BotGetter_GetAllBots_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bot.proto",
}

// BotWorkerClient is the client API for BotWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotWorkerClient interface {
	CreateBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*CreateBotResponse, error)
	DeleteBot(ctx context.Context, in *DeleteBotRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	UpdateBotTgToken(ctx context.Context, in *UpdateBotTgTokenRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	UpdateBotGoogleToken(ctx context.Context, in *UpdateBotGoogleTokenRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	SetAnswers(ctx context.Context, in *SetAnswersRequest, opts ...grpc.CallOption) (*BaseResponse, error)
}

type botWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewBotWorkerClient(cc grpc.ClientConnInterface) BotWorkerClient {
	return &botWorkerClient{cc}
}

func (c *botWorkerClient) CreateBot(ctx context.Context, in *CreateBotRequest, opts ...grpc.CallOption) (*CreateBotResponse, error) {
	out := new(CreateBotResponse)
	err := c.cc.Invoke(ctx, "/BotWorker/CreateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botWorkerClient) DeleteBot(ctx context.Context, in *DeleteBotRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/BotWorker/DeleteBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botWorkerClient) UpdateBotTgToken(ctx context.Context, in *UpdateBotTgTokenRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/BotWorker/UpdateBotTgToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botWorkerClient) UpdateBotGoogleToken(ctx context.Context, in *UpdateBotGoogleTokenRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/BotWorker/UpdateBotGoogleToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botWorkerClient) SetAnswers(ctx context.Context, in *SetAnswersRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/BotWorker/SetAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotWorkerServer is the server API for BotWorker service.
// All implementations should embed UnimplementedBotWorkerServer
// for forward compatibility
type BotWorkerServer interface {
	CreateBot(context.Context, *CreateBotRequest) (*CreateBotResponse, error)
	DeleteBot(context.Context, *DeleteBotRequest) (*BaseResponse, error)
	UpdateBotTgToken(context.Context, *UpdateBotTgTokenRequest) (*BaseResponse, error)
	UpdateBotGoogleToken(context.Context, *UpdateBotGoogleTokenRequest) (*BaseResponse, error)
	SetAnswers(context.Context, *SetAnswersRequest) (*BaseResponse, error)
}

// UnimplementedBotWorkerServer should be embedded to have forward compatible implementations.
type UnimplementedBotWorkerServer struct {
}

func (UnimplementedBotWorkerServer) CreateBot(context.Context, *CreateBotRequest) (*CreateBotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBot not implemented")
}
func (UnimplementedBotWorkerServer) DeleteBot(context.Context, *DeleteBotRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBot not implemented")
}
func (UnimplementedBotWorkerServer) UpdateBotTgToken(context.Context, *UpdateBotTgTokenRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotTgToken not implemented")
}
func (UnimplementedBotWorkerServer) UpdateBotGoogleToken(context.Context, *UpdateBotGoogleTokenRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotGoogleToken not implemented")
}
func (UnimplementedBotWorkerServer) SetAnswers(context.Context, *SetAnswersRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAnswers not implemented")
}

// UnsafeBotWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotWorkerServer will
// result in compilation errors.
type UnsafeBotWorkerServer interface {
	mustEmbedUnimplementedBotWorkerServer()
}

func RegisterBotWorkerServer(s grpc.ServiceRegistrar, srv BotWorkerServer) {
	s.RegisterService(&BotWorker_ServiceDesc, srv)
}

func _BotWorker_CreateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotWorkerServer).CreateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotWorker/CreateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotWorkerServer).CreateBot(ctx, req.(*CreateBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotWorker_DeleteBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotWorkerServer).DeleteBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotWorker/DeleteBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotWorkerServer).DeleteBot(ctx, req.(*DeleteBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotWorker_UpdateBotTgToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotTgTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotWorkerServer).UpdateBotTgToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotWorker/UpdateBotTgToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotWorkerServer).UpdateBotTgToken(ctx, req.(*UpdateBotTgTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotWorker_UpdateBotGoogleToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotGoogleTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotWorkerServer).UpdateBotGoogleToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotWorker/UpdateBotGoogleToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotWorkerServer).UpdateBotGoogleToken(ctx, req.(*UpdateBotGoogleTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotWorker_SetAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotWorkerServer).SetAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotWorker/SetAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotWorkerServer).SetAnswers(ctx, req.(*SetAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotWorker_ServiceDesc is the grpc.ServiceDesc for BotWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BotWorker",
	HandlerType: (*BotWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBot",
			Handler:    _BotWorker_CreateBot_Handler,
		},
		{
			MethodName: "DeleteBot",
			Handler:    _BotWorker_DeleteBot_Handler,
		},
		{
			MethodName: "UpdateBotTgToken",
			Handler:    _BotWorker_UpdateBotTgToken_Handler,
		},
		{
			MethodName: "UpdateBotGoogleToken",
			Handler:    _BotWorker_UpdateBotGoogleToken_Handler,
		},
		{
			MethodName: "SetAnswers",
			Handler:    _BotWorker_SetAnswers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bot.proto",
}
